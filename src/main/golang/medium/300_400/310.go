package medium

import "math"

//4
//[[1,0],[1,2],[1,3]]
//6
//[[3,0],[3,1],[3,2],[3,4],[5,4]]
//1
//[]
//707
//[[0,1],[0,2],[1,3],[0,4],[2,5],[4,6],[3,7],[3,8],[2,9],[3,10],[9,11],[10,12],[2,13],[6,14],[1,15],[13,16],[11,17],[5,18],[15,19],[6,20],[0,21],[5,22],[7,23],[9,24],[5,25],[1,26],[1,27],[19,28],[12,29],[25,30],[2,31],[23,32],[8,33],[28,34],[31,35],[7,36],[0,37],[5,38],[9,39],[10,40],[25,41],[38,42],[10,43],[15,44],[0,45],[16,46],[10,47],[40,48],[18,49],[0,50],[46,51],[4,52],[40,53],[17,54],[29,55],[26,56],[44,57],[16,58],[27,59],[11,60],[21,61],[60,62],[6,63],[55,64],[53,65],[41,66],[41,67],[22,68],[12,69],[31,70],[53,71],[3,72],[22,73],[47,74],[33,75],[53,76],[4,77],[44,78],[61,79],[27,80],[41,81],[32,82],[55,83],[32,84],[61,85],[69,86],[13,87],[56,88],[81,89],[30,90],[76,91],[85,92],[75,93],[21,94],[51,95],[85,96],[70,97],[34,98],[42,99],[32,100],[78,101],[21,102],[20,103],[52,104],[66,105],[72,106],[62,107],[33,108],[38,109],[35,110],[92,111],[82,112],[63,113],[99,114],[60,115],[98,116],[67,117],[81,118],[99,119],[15,120],[99,121],[10,122],[0,123],[35,124],[107,125],[88,126],[60,127],[36,128],[96,129],[30,130],[63,131],[16,132],[113,133],[120,134],[128,135],[23,136],[4,137],[114,138],[69,139],[43,140],[35,141],[20,142],[69,143],[17,144],[24,145],[110,146],[10,147],[63,148],[26,149],[149,150],[134,151],[12,152],[92,153],[62,154],[62,155],[77,156],[107,157],[126,158],[117,159],[120,160],[116,161],[73,162],[142,163],[107,164],[89,165],[150,166],[80,167],[113,168],[13,169],[70,170],[157,171],[41,172],[12,173],[126,174],[149,175],[12,176],[123,177],[27,178],[173,179],[42,180],[124,181],[161,182],[41,183],[40,184],[77,185],[38,186],[81,187],[74,188],[41,189],[177,190],[94,191],[0,192],[66,193],[121,194],[4,195],[75,196],[151,197],[192,198],[77,199],[198,200],[29,201],[113,202],[25,203],[50,204],[129,205],[132,206],[126,207],[7,208],[171,209],[108,210],[204,211],[96,212],[125,213],[12,214],[208,215],[154,216],[103,217],[133,218],[56,219],[54,220],[0,221],[173,222],[27,223],[210,224],[143,225],[167,226],[104,227],[23,228],[22,229],[21,230],[41,231],[73,232],[69,233],[61,234],[82,235],[7,236],[203,237],[40,238],[139,239],[85,240],[232,241],[224,242],[35,243],[208,244],[130,245],[128,246],[184,247],[29,248],[9,249],[141,250],[140,251],[38,252],[59,253],[160,254],[95,255],[216,256],[183,257],[93,258],[14,259],[164,260],[188,261],[75,262],[64,263],[96,264],[6,265],[224,266],[238,267],[266,268],[58,269],[1,270],[137,271],[268,272],[37,273],[243,274],[59,275],[154,276],[252,277],[142,278],[98,279],[165,280],[78,281],[94,282],[232,283],[273,284],[144,285],[37,286],[214,287],[68,288],[148,289],[5,290],[20,291],[145,292],[219,293],[247,294],[104,295],[238,296],[45,297],[278,298],[21,299],[75,300],[188,301],[139,302],[256,303],[158,304],[244,305],[189,306],[247,307],[267,308],[207,309],[96,310],[103,311],[277,312],[35,313],[95,314],[9,315],[68,316],[146,317],[307,318],[243,319],[140,320],[242,321],[63,322],[239,323],[71,324],[134,325],[190,326],[245,327],[30,328],[94,329],[182,330],[230,331],[196,332],[196,333],[65,334],[81,335],[65,336],[60,337],[261,338],[208,339],[107,340],[276,341],[321,342],[89,343],[211,344],[103,345],[2,346],[83,347],[346,348],[144,349],[7,350],[308,351],[46,352],[149,353],[303,354],[192,355],[213,356],[170,357],[200,358],[172,359],[342,360],[92,361],[50,362],[359,363],[140,364],[186,365],[22,366],[196,367],[359,368],[279,369],[85,370],[30,371],[124,372],[29,373],[140,374],[14,375],[97,376],[367,377],[57,378],[260,379],[163,380],[248,381],[125,382],[181,383],[286,384],[204,385],[84,386],[89,387],[323,388],[151,389],[306,390],[251,391],[280,392],[208,393],[208,394],[38,395],[88,396],[182,397],[380,398],[365,399],[69,400],[248,401],[327,402],[369,403],[296,404],[398,405],[149,406],[89,407],[357,408],[73,409],[27,410],[268,411],[88,412],[205,413],[378,414],[28,415],[303,416],[404,417],[95,418],[286,419],[162,420],[181,421],[7,422],[422,423],[249,424],[264,425],[73,426],[306,427],[378,428],[162,429],[143,430],[334,431],[15,432],[16,433],[221,434],[343,435],[91,436],[90,437],[429,438],[409,439],[401,440],[433,441],[190,442],[208,443],[80,444],[70,445],[119,446],[340,447],[119,448],[168,449],[30,450],[269,451],[425,452],[299,453],[269,454],[234,455],[333,456],[366,457],[433,458],[120,459],[346,460],[402,461],[173,462],[13,463],[233,464],[171,465],[228,466],[87,467],[148,468],[13,469],[163,470],[437,471],[18,472],[416,473],[6,474],[405,475],[404,476],[214,477],[356,478],[257,479],[201,480],[444,481],[481,482],[153,483],[53,484],[480,485],[477,486],[61,487],[393,488],[323,489],[288,490],[244,491],[126,492],[416,493],[440,494],[256,495],[343,496],[415,497],[243,498],[98,499],[255,500],[9,501],[6,502],[151,503],[172,504],[464,505],[149,506],[400,507],[399,508],[237,509],[40,510],[122,511],[30,512],[292,513],[146,514],[163,515],[237,516],[476,517],[170,518],[130,519],[14,520],[386,521],[135,522],[308,523],[145,524],[441,525],[95,526],[57,527],[413,528],[42,529],[201,530],[32,531],[5,532],[135,533],[226,534],[356,535],[515,536],[484,537],[78,538],[159,539],[98,540],[442,541],[376,542],[532,543],[377,544],[476,545],[293,546],[466,547],[205,548],[543,549],[57,550],[51,551],[227,552],[253,553],[274,554],[61,555],[276,556],[470,557],[59,558],[134,559],[47,560],[429,561],[310,562],[373,563],[517,564],[189,565],[256,566],[420,567],[43,568],[408,569],[107,570],[257,571],[175,572],[331,573],[384,574],[305,575],[384,576],[500,577],[341,578],[89,579],[94,580],[446,581],[81,582],[44,583],[219,584],[358,585],[83,586],[542,587],[217,588],[440,589],[85,590],[68,591],[192,592],[300,593],[399,594],[32,595],[47,596],[2,597],[341,598],[49,599],[247,600],[286,601],[372,602],[144,603],[565,604],[165,605],[313,606],[35,607],[161,608],[387,609],[156,610],[577,611],[391,612],[608,613],[410,614],[113,615],[346,616],[74,617],[565,618],[523,619],[280,620],[619,621],[83,622],[38,623],[198,624],[439,625],[491,626],[404,627],[264,628],[327,629],[585,630],[541,631],[165,632],[552,633],[486,634],[539,635],[193,636],[407,637],[66,638],[607,639],[368,640],[640,641],[302,642],[608,643],[617,644],[312,645],[12,646],[24,647],[339,648],[445,649],[344,650],[311,651],[112,652],[508,653],[514,654],[439,655],[627,656],[561,657],[52,658],[25,659],[428,660],[313,661],[439,662],[345,663],[536,664],[578,665],[339,666],[443,667],[345,668],[416,669],[369,670],[548,671],[417,672],[524,673],[552,674],[36,675],[347,676],[373,677],[414,678],[58,679],[132,680],[347,681],[282,682],[46,683],[53,684],[446,685],[495,686],[444,687],[381,688],[574,689],[222,690],[508,691],[85,692],[57,693],[24,694],[29,695],[251,696],[111,697],[273,698],[13,699],[657,700],[256,701],[559,702],[288,703],[552,704],[550,705],[312,706]]
func findMinHeightTrees(n int, edges [][]int) []int {
	if n == 1 {
		return []int{0}
	}
	matrix := make([][]int, n)
	degree := make([]int, n)
	for _, t2 := range edges {
		matrix[t2[0]], matrix[t2[1]] = append(matrix[t2[0]], t2[1]), append(matrix[t2[1]], t2[0])
		degree[t2[0]], degree[t2[1]] = degree[t2[0]]+1, degree[t2[1]]+1
	}
	var q []int
	for i := 0; i < n; i++ {
		if degree[i] == 1 {
			q = append(q, i)
		}
	}
	for n > 2 {
		var size = len(q)
		var tmp []int
		for i := 0; i < size; i++ {
			from := q[i]
			for _, to := range matrix[from] {
				degree[to] -= 1
				if degree[to] == 1 {
					tmp = append(tmp, to)
				}
			}
		}
		n -= size
		q = tmp
	}
	return q
}

func findMinHeightTrees2(n int, edges [][]int) []int {

	matrix := make([][]int, n)
	for _, t2 := range edges {
		matrix[t2[0]] = append(matrix[t2[0]], t2[1])
		matrix[t2[1]] = append(matrix[t2[1]], t2[0])
	}

	parent := make([]int, n)
	bfs := func(start int) (x int) {
		var q = []int{start}
		visited := make([]bool, n)
		visited[start] = true
		for len(q) > 0 {
			x, q = q[0], q[1:]
			for _, to := range matrix[x] {
				if !visited[to] {
					visited[to] = true
					q = append(q, to)
					parent[to] = x
				}
			}
		}
		return
	}
	x := bfs(0)
	y := bfs(x)

	parent[x] = -1
	var path []int
	for y != -1 {
		path = append(path, y)
		y = parent[y]
	}
	m := len(path)
	if m%2 == 0 {
		return []int{path[m/2], path[m/2-1]}
	}
	return []int{path[m/2]}
}

func findMinHeightTrees1(n int, edges [][]int) []int {

	buidAdjMatrix := func(n int, e [][]int) ([][]bool, []int) {
		adj := make([][]bool, n)
		start := make([]int, n)
		for i := 0; i < n; i++ {
			adj[i] = make([]bool, n)
		}
		for _, item := range e {
			adj[item[0]][item[1]] = true
			adj[item[1]][item[0]] = true
			start[item[0]] = 1
			start[item[1]] = 1
		}
		return adj, start
	}
	adj, starter := buidAdjMatrix(n, edges)
	searchHeight := func(start int) int {
		step, q := 0, []int{start}
		visited := make([]bool, n)
		visited[start] = true
		for len(q) > 0 {
			var tmp []int
			for i := 0; i < len(q); i++ {
				for to, ok := range adj[q[i]] {
					if ok && !visited[to] {
						tmp = append(tmp, to)
						visited[to] = true
					}
				}
			}
			step++
			q = tmp
		}
		return step
	}
	if n == 1 {
		return []int{0}
	}
	mh := math.MaxInt32
	for i, ok := range starter {
		if ok > 0 {
			h := searchHeight(i)
			starter[i] = h
			if h < mh {
				mh = h
			}
		}
	}
	var ans []int
	for i, height := range starter {
		if height == mh {
			ans = append(ans, i)
		}
	}
	return ans
}
