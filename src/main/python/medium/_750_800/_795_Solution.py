# 795. Number of Subarrays with Bounded Maximum
from typing import List

'''
[2,1,4,3]
2
3
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
5
19
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
3
19
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
3
50
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
0
50
[2,1,4,3]
2
3
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
5
19
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
3
19
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
3
50
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
15
15
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
41
41
[2,1,4,3]
2
3
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
5
19
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
3
19
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
3
50
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
0
50
[2,1,4,3]
2
3
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
5
19
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
3
19
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
3
50
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
15
15
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
1
1
[10,3,4,11,12,13,14,17,20,21,15,16,30,18,40]
1
2
[10,2,4,11,12,13,14,17,20,21,15,16,30,18,40]
1
2
[10,20,10,20,10,20,10,20]
11
19
[73,55,36,5,55,14,9,7,72,52]
32
69
[876,880,482,260,132,421,732,703,795,420,871,445,400,291,358,589,617,202,755,810,227,813,549,791,418,528,835,401,526,584,873,662,13,314,988,101,299,816,833,224,160,852,179,769,646,558,661,808,651,982,878,918,406,551,467,87,139,387,16,531,307,389,939,551,613,36,528,460,404,314,66,111,458,531,944,461,951,419,82,896,467,353,704,905,705,760,61,422,395,298,127,516,153,299,801,341,668,598,98,241]
658
719
'''


class _795_Solution:
    def numSubarrayBoundedMax(self, A: List[int], L: int, R: int) -> int:
        stack, ans, size = [], 0, 0
        for item in A:
            if item > R:
                stack.clear()
                size = 0
            else:
                size += 1
                if L <= item:
                    stack.append((item, size))
                    ans += size
                else:
                    ans += stack[-1][1] if stack else 0
        return ans

    def numSubarrayBoundedMax(self, A: List[int], L: int, R: int) -> int:
        s0 = s1 = ans = 0
        for item in A:
            if item > R:
                s1 = s0 = 0
            else:
                s0 += 1
                if L <= item:
                    s1 = s0
                    ans += s0
                else:
                    ans += s1
        return ans

    def numSubarrayBoundedMax(self, A: List[int], L: int, R: int) -> int:
        l = r = -1
        ans = 0
        for i, item in enumerate(A):
            if item >= L: r = i
            if item > R: l = i
            ans += r - l
        return ans


if __name__ == '__main__':
    tar = _795_Solution()
    assert tar.numSubarrayBoundedMax([73, 55, 36, 5, 55, 14, 9, 7, 72, 52], 32, 69) == 22
    assert tar.numSubarrayBoundedMax([10, 2, 4, 11, 12, 13, 14, 17, 20, 21, 15, 16, 30, 18, 40], 15, 15) == 1
    assert tar.numSubarrayBoundedMax([10, 2, 4, 11, 12, 13, 14, 17, 20, 21, 15, 16, 30, 18, 40], 5, 19) == 37
    assert tar.numSubarrayBoundedMax([2, 1, 4, 3], 2, 3) == 3
